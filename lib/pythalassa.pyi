import numpy
from typing import ClassVar

COWELL: Equations
DRAG_DISABLED: ModelDrag
DRAG_J77: ModelDrag
DRAG_NRLMSISE00: ModelDrag
DRAG_US76: ModelDrag
DRAG_WERTZ: ModelDrag
EDROMO_C: Equations
EDROMO_L: Equations
EDROMO_T: Equations
EPHEM_DE431: ModelEphemerides
EPHEM_SIMPLE: ModelEphemerides
FLUX_CONSTANT: ModelFlux
FLUX_VARIABLE: ModelFlux
KS_L: Equations
KS_T: Equations
MOON_DISABLED: ModelMoon
MOON_ENABLED: ModelMoon
NONSPHERICAL: ModelGravity
SPHERICAL: ModelGravity
SRP_DISABLED: ModelSRP
SRP_ENABLED: ModelSRP
SRP_ENABLED_CONICAL: ModelSRP
STISCHE_L: Equations
STISCHE_T: Equations
SUN_DISABLED: ModelSun
SUN_ENABLED: ModelSun

class Equations:
    __members__: ClassVar[dict] = ...  # read-only
    COWELL: ClassVar[Equations] = ...
    EDROMO_C: ClassVar[Equations] = ...
    EDROMO_L: ClassVar[Equations] = ...
    EDROMO_T: ClassVar[Equations] = ...
    KS_L: ClassVar[Equations] = ...
    KS_T: ClassVar[Equations] = ...
    STISCHE_L: ClassVar[Equations] = ...
    STISCHE_T: ClassVar[Equations] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Model:
    gdeg: int
    gord: int
    iF107: ModelFlux
    iSRP: ModelSRP
    idrag: ModelDrag
    iephem: ModelEphemerides
    imoon: ModelMoon
    insgrav: ModelGravity
    isun: ModelSun
    def __init__(self) -> None: ...

class ModelDrag:
    __members__: ClassVar[dict] = ...  # read-only
    DRAG_DISABLED: ClassVar[ModelDrag] = ...
    DRAG_J77: ClassVar[ModelDrag] = ...
    DRAG_NRLMSISE00: ClassVar[ModelDrag] = ...
    DRAG_US76: ClassVar[ModelDrag] = ...
    DRAG_WERTZ: ClassVar[ModelDrag] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ModelEphemerides:
    __members__: ClassVar[dict] = ...  # read-only
    EPHEM_DE431: ClassVar[ModelEphemerides] = ...
    EPHEM_SIMPLE: ClassVar[ModelEphemerides] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ModelFlux:
    __members__: ClassVar[dict] = ...  # read-only
    FLUX_CONSTANT: ClassVar[ModelFlux] = ...
    FLUX_VARIABLE: ClassVar[ModelFlux] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ModelGravity:
    __members__: ClassVar[dict] = ...  # read-only
    NONSPHERICAL: ClassVar[ModelGravity] = ...
    SPHERICAL: ClassVar[ModelGravity] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ModelMoon:
    __members__: ClassVar[dict] = ...  # read-only
    MOON_DISABLED: ClassVar[ModelMoon] = ...
    MOON_ENABLED: ClassVar[ModelMoon] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ModelSRP:
    __members__: ClassVar[dict] = ...  # read-only
    SRP_DISABLED: ClassVar[ModelSRP] = ...
    SRP_ENABLED: ClassVar[ModelSRP] = ...
    SRP_ENABLED_CONICAL: ClassVar[ModelSRP] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ModelSun:
    __members__: ClassVar[dict] = ...  # read-only
    SUN_DISABLED: ClassVar[ModelSun] = ...
    SUN_ENABLED: ClassVar[ModelSun] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Paths:
    earth_path: str
    eop_path: str
    kernel_path: str
    phys_path: str
    def __init__(self) -> None: ...

class Propagator:
    settings: Settings
    spacecraft: Spacecraft
    def __init__(self, arg0: Model, arg1: Paths, arg2: Settings, arg3: Spacecraft) -> None: ...
    def propagate(self, arg0: numpy.ndarray[numpy.float64[m, 1]], arg1: numpy.ndarray[numpy.float64[m, 1]]) -> numpy.ndarray[numpy.float64[m, n]]: ...
    @property
    def model(self) -> Model: ...
    @property
    def paths(self) -> Paths: ...

class Settings:
    eqs: Equations
    imcoll: int
    mxstep: int
    tol: float
    tspan: float
    tstep: float
    def __init__(self) -> None: ...

class Spacecraft:
    area_drag: float
    area_srp: float
    cd: float
    cr: float
    mass: float
    def __init__(self) -> None: ...
